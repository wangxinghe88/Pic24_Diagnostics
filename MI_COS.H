#ifndef __MI_COS_H
#define __MI_COS_H

/*************************************************************************
*   $MODULE
*   micos.h
*
*   This is the header file for the MiCOS operating system.  Check
*   micos.doc for architecture information.
*************************************************************************/

/*************************************************************************
*   $INCLUDES
*************************************************************************/

/*************************************************************************
*   $DEFINES
*************************************************************************/
#define MI_EVENT_OFFSET   0x20
#define MI_STATE_OFFSET   0x20

/*************************************************************************
*   $GLOBAL PROTOTYPES
*************************************************************************/
typedef unsigned char MI_BYTE;
typedef signed char   MI_SBYTE;
typedef unsigned int  MI_WORD;
typedef signed int    MI_SWORD;

/* for 8051 */
#if 0
typedef MI_BYTE TMiWord;
typedef MI_SBYTE TMiSWord;
#endif

/* for X86 */
typedef MI_WORD TMiWord;
typedef MI_SWORD TMiSWord;

/*
 * Note:    The enums below should always be referred to as TMiEvent and
 *          TMiResult, as defined above.  In this way, a byte variable
 *          will be generated by the compiler.
 */
typedef enum _MICOS_EVENT {
    EV_IDLE = 1,
    EV_INIT,
    EV_EXIT,
} MICOS_EVENT;

typedef enum _MICOS_RESULT {
    RES_SAME_STATE = 0,
    RES_OK,
    RES_MAX_TASKS,
    RES_TASK_LIST_FULL,
    RES_INVALID_TASK,
    RES_EVENT_QUEUE_FULL,
    RES_DONE,        /* When a state finishes its processing     */
} TMiResult;

void MiCos(void);

/* MiCOS tasks are defined in mi_app.c     */
typedef void TMiTask(void);

/* MiCOS states are defined in mi_app.c    */
typedef TMiResult TMiState(void);
typedef TMiResult (*TMiStatePtr)(void);

TMiResult MiTaskCreate(TMiTask * TaskPtr);

TMiResult MiTaskDestroy(TMiTask * TaskPtr);

TMiStatePtr MiGetCurrentState( void );

void MiTasksRun(void) ;

void MiEventWrite(MICOS_EVENT EventType);

/*
 * An array of these makes up the state transition table.
 */
typedef struct _STATE_TRANS_ENTRY {
        TMiStatePtr StatePtr;
        TMiResult Result;
        TMiStatePtr NextStatePtr;
} TMiStateTransEntry, *TMiStateTransEntryPtr;

/*
 * This is a system wide structure used to record errors.
 */
typedef union {
    MI_WORD Word;
    MI_BYTE Byte[2];
    struct {
        unsigned EventQueueOverflow: 1;
        unsigned Unused1: 1;
        unsigned Unused2: 1;
        unsigned Unused3: 1;
        unsigned Unused4: 1;
        unsigned Unused5: 1;
        unsigned Unused6: 1;
        unsigned Unused7: 1;
    } Bit;
} TMiFatalErrorFlag;

/************************************************************************
*   $GLOBAL VARIABLES
*************************************************************************/
/* The system state transition table */
extern TMiStateTransEntry StateTable[];

extern MICOS_EVENT MiCurrentEvent;

/* The MiCOS error flag */
extern TMiFatalErrorFlag MiFatalError;

#endif

